
import { supabase } from '@/integrations/supabase/client';
import { FormData as WorksheetFormData } from '@/components/WorksheetForm';

// URLs for the Edge Functions
const GENERATE_WORKSHEET_URL = 'https://bvfrkzdlklyvnhlpleck.supabase.co/functions/v1/generateWorksheet';
const SUBMIT_FEEDBACK_URL = 'https://bvfrkzdlklyvnhlpleck.supabase.co/functions/v1/submitFeedback';

/**
 * Generates a worksheet using the Edge Function
 */
export async function generateWorksheet(prompt: WorksheetFormData, userId: string) {
  try {
    // Send the entire prompt object to the edge function
    console.log('Sending prompt to generateWorksheet function:', prompt);
    
    const response = await fetch(GENERATE_WORKSHEET_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: JSON.stringify(prompt), // Send the entire prompt object as JSON
        userId
      })
    });

    // Check for specific error codes
    if (response.status === 401) {
      throw new Error('Authentication failed: Invalid or missing OpenAI API key. Please check your API key.');
    }
    
    if (response.status === 429) {
      throw new Error('You have reached your daily limit for worksheet generation. Please try again tomorrow.');
    }
    
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = 'Failed to generate worksheet';
      
      try {
        // Try to parse the error as JSON
        const errorJson = JSON.parse(errorText);
        if (errorJson.error) {
          errorMessage = errorJson.error;
        }
      } catch (e) {
        // If parsing fails, use the raw text
        errorMessage = `${errorMessage}: ${errorText}`;
      }
      
      throw new Error(errorMessage);
    }

    // Get the HTML content generated by OpenAI
    const htmlContent = await response.text();
    console.log('Received HTML content from edge function');
    
    return htmlContent;
  } catch (error) {
    console.error('Error generating worksheet:', error);
    throw error;
  }
}

/**
 * Submits feedback for a worksheet
 */
export async function submitWorksheetFeedback(worksheetId: string, rating: number, comment: string, userId: string) {
  try {
    console.log('Submitting feedback:', { worksheetId, rating, comment, userId });
    
    const { data, error } = await supabase
      .from('feedbacks')
      .insert({
        worksheet_id: worksheetId,
        rating: rating,
        comment: comment,
        user_id: userId
      });

    if (error) {
      console.error('Error submitting feedback directly to Supabase:', error);
      
      // Fallback to edge function if direct insert fails
      const response = await fetch(SUBMIT_FEEDBACK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          worksheetId,
          rating,
          comment,
          userId
        })
      });

      if (!response.ok) {
        throw new Error(`Failed to submit feedback: ${await response.text()}`);
      }
      
      return await response.json();
    }
    
    return data;
  } catch (error) {
    console.error('Error submitting feedback:', error);
    throw error;
  }
}

/**
 * Tracks an event (view, download, etc.)
 */
export async function trackEvent(type: string, worksheetId: string, userId: string, metadata: any = {}) {
  try {
    const { error } = await supabase.from('events').insert({
      type,
      worksheet_id: worksheetId,
      user_id: userId,
      metadata
    });

    if (error) throw error;
  } catch (error) {
    console.error(`Error tracking ${type} event:`, error);
  }
}
