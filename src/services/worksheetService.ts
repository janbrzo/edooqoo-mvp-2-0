
import { supabase } from '@/integrations/supabase/client';
import { FormData as WorksheetFormData } from '@/components/WorksheetForm';

// URLs for the Edge Functions
const GENERATE_WORKSHEET_URL = 'https://bvfrkzdlklyvnhlpleck.supabase.co/functions/v1/generateWorksheet';
const SUBMIT_FEEDBACK_URL = 'https://bvfrkzdlklyvnhlpleck.supabase.co/functions/v1/submitFeedback';

/**
 * Generates a worksheet using the Edge Function
 */
export async function generateWorksheet(prompt: WorksheetFormData, userId: string) {
  try {
    // Send the entire prompt object to the edge function
    console.log('Sending prompt to generateWorksheet function:', prompt);
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 40000); // 40 second timeout
    
    const response = await fetch(GENERATE_WORKSHEET_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        prompt: JSON.stringify(prompt), // Send the entire prompt object as JSON
        userId
      }),
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);

    // Check for error responses
    if (!response.ok) {
      // Try to parse the error as JSON
      const errorData = await response.json().catch(() => null);
      
      if (errorData && errorData.error) {
        throw new Error(errorData.error);
      }
      
      // Handle specific status codes with fallback error messages
      if (response.status === 401) {
        throw new Error('Błąd autoryzacji: Nieprawidłowy lub brakujący klucz API OpenAI. Sprawdź swój klucz API.');
      }
      
      if (response.status === 429) {
        throw new Error('Osiągnąłeś dzienny limit generowania arkuszy. Spróbuj ponownie jutro.');
      }
      
      if (response.status === 500) {
        throw new Error('Błąd serwera podczas generowania arkusza. Spróbuj ponownie za chwilę.');
      }
      
      if (response.status === 504) {
        throw new Error('Czas generowania przekroczył limit. Serwer może być przeciążony. Spróbuj ponownie za chwilę.');
      }
      
      // Generic error message if we couldn't parse a more specific one
      throw new Error(`Nie udało się wygenerować arkusza (status ${response.status})`);
    }

    // Check content type to determine how to handle the response
    const contentType = response.headers.get('content-type');
    
    if (contentType && contentType.includes('application/json')) {
      // Handle JSON response
      const data = await response.json();
      if (data.error) {
        throw new Error(data.error);
      }
      
      if (!data.html || typeof data.html !== 'string' || data.html.trim() === '') {
        throw new Error('Otrzymano pustą odpowiedź z serwera. Spróbuj ponownie.');
      }
      
      return data.html;
    }
    
    // Get the HTML content generated by OpenAI
    const htmlContent = await response.text();
    console.log('Received HTML content from edge function');
    
    if (!htmlContent || typeof htmlContent !== 'string' || htmlContent.trim() === '') {
      throw new Error('Otrzymano pustą odpowiedź z serwera. Spróbuj ponownie.');
    }
    
    return htmlContent;
  } catch (error: any) {
    console.error('Error generating worksheet:', error);
    
    if (error.name === 'AbortError') {
      throw new Error('Żądanie przekroczyło limit czasu. Serwer może być przeciążony. Spróbuj ponownie za chwilę.');
    }
    
    throw error;
  }
}

/**
 * Submits feedback for a worksheet
 */
export async function submitWorksheetFeedback(worksheetId: string, rating: number, comment: string, userId: string) {
  try {
    console.log('Submitting feedback:', { worksheetId, rating, comment, userId });
    
    const { data, error } = await supabase
      .from('feedbacks')
      .insert({
        worksheet_id: worksheetId,
        rating: rating,
        comment: comment,
        user_id: userId
      });

    if (error) {
      console.error('Error submitting feedback directly to Supabase:', error);
      
      // Fallback to edge function if direct insert fails
      const response = await fetch(SUBMIT_FEEDBACK_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          worksheetId,
          rating,
          comment,
          userId
        })
      });

      if (!response.ok) {
        throw new Error(`Nie udało się wysłać opinii: ${await response.text()}`);
      }
      
      return await response.json();
    }
    
    return data;
  } catch (error) {
    console.error('Error submitting feedback:', error);
    throw error;
  }
}

/**
 * Tracks an event (view, download, etc.)
 */
export async function trackEvent(type: string, worksheetId: string, userId: string, metadata: any = {}) {
  try {
    const { error } = await supabase.from('events').insert({
      type,
      worksheet_id: worksheetId,
      user_id: userId,
      metadata
    });

    if (error) throw error;
  } catch (error) {
    console.error(`Error tracking ${type} event:`, error);
  }
}
